{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Clojure programming with VSpaceCode","text":"<p>VSpaceCode is an extension to VSCode that provides a complete keyboard driven experience, driving not just the text but the whole editor.</p> <p>A mnemonic menu system on top of the VSCode command pallet is driven by which-key and provides access to a far wider range of commands that VSCode alone.</p> <p>Practicalli added VSpaceCode key bindings for Calva to provide an effective Clojure workflow.</p> <p>Calva key bindings in VSpaceCode</p> <p>VSpaceCode includes Calva key bindings directly via pull request #154</p> <p>Official VSpaceCode documentation</p> <p> </p>"},{"location":"#navigate-the-book","title":"Navigate the book","text":"<p>Use the mouse or built-in key bindings to navigate the pages of the book</p> <ul> <li>P , , : go to previous page</li> <li>N , . : go to next page</li> </ul> <p>Use the search box to quickly find a specific topic</p> <ul> <li>F , S , / : open search dialog</li> <li>Down , Up : select next / previous result</li> <li>Esc , Tab : close search dialog</li> <li>Enter : follow selected result</li> </ul>"},{"location":"#sponsor-practicalli","title":"Sponsor Practicalli","text":"<p>All sponsorship recieved is used to maintain and further develop the Practicalli series of books and videos, although most of the work is still done with my own time and cost.</p> <p>Thank you to Cognitect, Nubank and a wide range of other sponsors from the Clojure community for your continued support</p>"},{"location":"#creative-commons-license","title":"Creative commons license","text":"This work is licensed under a Creative Commons Attribution 4.0 ShareAlike License (including images &amp; stylesheets)."},{"location":"assets/images/social/","title":"Social Cards","text":"<p>Social Cards are visual previews of the website that are included when sending links via social media platforms.</p> <p>Material for MkDocs is configured to generate beautiful social cards automatically, using the colors, fonts and logos defined in <code>mkdocs.yml</code></p> <p>Generated images are stored in this directory.</p>"},{"location":"configuration/","title":"Configuration","text":"<p>VS Code</p> <ul> <li>Theme and Font</li> </ul>"},{"location":"configuration/theme-font-configuration/","title":"Theme and Font configuration","text":"<p>Ctrl+k Ctrl+t opens the theme selector for VSCode</p> <p>Or use Space Space to open the VSCode command menu, type <code>settings</code> to narrow the command list and select <code>Preferences: Open Settings (JSON)</code>.</p> <p>Change the preferences for theme, font size, font family and window zoom level (size of graphical parts of the VS Code windows - positive numbers for larger, negative for smaller).</p> .config/Code/User/settings.json<pre><code>    \"workbench.colorTheme\": \"Solarized Light\",\n\"editor.fontSize\": 14,\n\"editor.fontFamily\": \"'Fira Code', 'Ubuntu Mono', 'Droid Sans Mono', 'monospace', monospace, 'Droid Sans Fallback'\",\n\"window.zoomLevel\": 0,\n</code></pre> <p>Space f f to save changes and apply them directly.</p> <p>Install fonts in the operating system</p> <p>Fira Code and Ubuntu Mono fonts may require installing on your operating system.</p> <p></p>"},{"location":"guide/quick-start/","title":"VSCode quick start","text":"<p>The VSCode quick start covers Calva essentials for Clojure development, including Calva and VSpaceCode key bindings.</p> <p>Open a Clojure project and star a REPL from Calva or connect to a command line repl.  Calva is then ready for writing Clojure code and evaluating results instantly.</p> <p>The Calva User Guide provides a detailed guide to the features of Calva, although the key bindings for VSpaceCode are not included in that guide.</p>"},{"location":"guide/quick-start/#open-a-clojure-project","title":"Open a Clojure project","text":"<p>Run the command <code>code .</code> from the root of a Clojure project or run VSCode and use the VSpaceCode key bindings to open a project.</p> <p>Space f f and open the Folder that contains a Clojure project. Select the top level of the folder, e.g. <code>playground</code> and click OK</p>"},{"location":"guide/quick-start/#launch-repl-from-calva","title":"Launch REPL from Calva","text":"<p>Calva can start a REPL process using Clojure CLI or Leiningen.</p> <p>For Clojure CLI, aliases from the project <code>deps.edn</code> can be selected to modify the REPL startup.</p> Use Command Line REPL for Clojure CLI and user aliases <p>Calva does not read aliases from the Clojure CLI user configuration, i.e. <code>$XDG_CONFIG_HOME/clojure/deps.edn</code> or <code>$HOME/.clojure/deps.edn</code></p> <p>Start a REPL via the command line to include aliases from the user configuration, e.g. <pre><code>clojure -M:dev/reloaded:repl/rebel\n</code></pre></p> <p>, \" to jack-in to a Clojure REPL for the project.  This starts an external REPL process and connects to it.</p> <p>Alternative, use , ' to connect to an external REPL process that has already started.</p> <p>Select either <code>deps.edn</code> for Clojure CLI or <code>Leiningen</code> when prompted for the project type</p> <p></p> <p>Wait a few moments for the REPL to start.</p> <p>A new REPL window will open when the Clojure REPL is ready</p> <p></p> <p>The VSCode Status Bar shows when the Clojure REPL is connected</p> <p> </p>"},{"location":"guide/quick-start/#troubleshooting","title":"Troubleshooting","text":"<p>If the REPL did not start, the nREPL link in the bottom blue bar will show the word \"Disconnected\".</p> <p></p> <p>Open the Output tab to see the progress of the REPL starting.  Ask your coach for help if you see output other than that below.</p> <p></p> <p>Try running a REPL in the command line and connecting to it (details at bottom of this page).</p>"},{"location":"guide/quick-start/#start-command-line-repl","title":"Start command line REPL","text":"<p>Ctrl+` toggles open the VSCode Integrated terminal, or use the operating system terminal.</p> Windows GitBash users <p>Configure the VS Code internal terminal to use the GitBash shell.</p> Practicalli recommends Kitty Terminal <p>Kitty Terminal is a fast, feature-rich GPU based terminal emulator.</p> <p>In the terminal, change to the folder than contains your project, e.g. <code>cd projects/clojure/playground</code></p> Clojure CLILeiningen <p>Start a REPL process via Clojure CLI tools, using the Practicalli Clojure CLI Config aliases which also starts an nREPL server that an editor can connect to.</p> <pre><code>clojure -M:repl/basic\n</code></pre> <p>If you also wish to have an interactive terminal REPL, include rebel readline when starting the REPL</p> <pre><code>clojure -M:repl/rebel\n</code></pre> <p>To use Leiningen, type the command <code>lein repl</code> in the terminal.</p> <p></p>"},{"location":"guide/quick-start/#connecting-to-external-repl","title":"Connecting to external REPL","text":"<p>Ctrl+' to connect to an external REPL process from Calva / VSpaceCode.</p> <p>For the project type select either deps.edn for Clojure CLI or Leiningen when prompted</p> <p>Confirm the host and port of the REPL, this should be automatically detected. Host and port details were shown in the output when running the REPL in the terminal.</p> <p></p> <p>Wait a few moments for the REPL to start.</p> <p>A new REPL window will open when the Clojure REPL is ready</p> <p></p> <p>In the bottom left of the VS Code window, check the status of the nrepl connection.  If you are connected, then the disconnected status should disappear</p> <p>In the bottom left of the VS Code window, check the status of the nrepl connection.  If you are connected, then the disconnected status should disappear</p> <p></p>"},{"location":"guide/quick-start/#evaluate-code","title":"Evaluate Code","text":"<p>Once you have a running REPL, use these commands to help you develop the code.</p> <p>, e f to evaluate a top-level expression and see the results inline.  Or , e s to select a specific expression and , e e to evaluate it.</p> <p>, e l to clear all the evaluated results.</p> Keybinding Description , e ++semi-colon++ Evaluate the current expression and paste as comment , e : Evaluate the current expression and paste as comment , e e Show the result of the current expression , e f Show the result of the top level expression , e l Clear all the evaluated results , e n Evaluate all code in the current file/namespace , e s Select current expression , e w Replace the expression with its result <p>REPL history</p> <p>The REPL window maintains a history of the code typed in and can be navigated by pressing <code>Alt+Up</code> and <code>Alt+Down</code>.</p>"},{"location":"guide/quick-start/#running-tests","title":"Running tests","text":"<p>Unit tests can be run from Calva</p> <p>, e n to evaluate all the unit test code in the current window</p> <p>, t a to run all the unit tests in the project</p> <p>, t f to run just the failing tests</p> Keybinding Description , t a Run all tests in the project , t f Run failing tests , t n Run all tests for the current namespace , t t Run current test <p>Test results shown in REPL</p> <p>The REPL window is used to display the results of running unit tests</p>"},{"location":"guide/quick-start/#commenting-uncommenting-code","title":"Commenting / uncommenting code","text":"<p>Use  <code>;;</code> at the start of a line, which comments it out.</p> <p>VSpaceCode comment key binding</p> <p><code>SPC c l</code> toggles a comment on the current line.</p> <p>Line comments keybindings ?</p> <p>The Add Line Comment command to place line comment command is broken in Calva, it only produces a single semi-colon TODO: is this configurable in Calva.</p>"},{"location":"guide/quick-start/#increase-decrease-font-size","title":"Increase / decrease font size","text":"<p><code>Ctrl +</code> and <code>Ctrl -</code> will increase and decrease the size of the whole editor.</p> <p><code>Ctrl Shift P</code> and type the command <code>Preference: Open Settings (JSON)</code> to open the <code>settings.json</code> configuration file.  Update the value for <code>editor.fontSize</code> and save the file.  The font should update immediately in the VS Code UI.</p> <p>Other useful options that can be added to the <code>settings.json</code> configuration</p> <pre><code>   \"workbench.colorTheme\": \"Solarized Light\",\n    \"editor.fontSize\": 14,\n    \"editor.fontFamily\": \"'Fira Code', 'Ubuntu Mono', 'Droid Sans Mono', 'monospace', monospace, 'Droid Sans Fallback'\",\n    \"window.zoomLevel\": 1,\n    \"calva.paredit.defaultKeyMap\": \"strict\"\n</code></pre>"},{"location":"guide/quick-start/#structured-editing-paredit","title":"Structured editing - Paredit","text":"<p>Once you get the basics of Clojure development, you can try structural editing which is a way to edit your code without breaking the structure of Clojure.  Structural editing ensures you dont have uneven parentheses, <code>()</code>, <code>[]</code>, <code>{}</code>, etc.</p> <p>The Calva visual Guide to Paredit includes lots of examples of using Structural editing.</p>"},{"location":"guide/quick-start/#linting","title":"Linting","text":"<p><code>, c n</code> and <code>, c N</code> cycle through clj-kondo linting warnings</p>"},{"location":"guide/quick-start/#increase-decrease-font-size_1","title":"Increase / decrease font size","text":"<p><code>Ctrl +</code> and <code>Ctrl -</code> will increase and decrease the size of the whole editor.</p> <p><code>SPC SPC</code> and type the command <code>Preference: Open Settings (JSON)</code> to open the <code>settings.json</code> configuration file.  Update the value for <code>editor.fontSize</code> and save the file.  The font should update immediately in the VS Code UI.</p> <p>Other useful options that can be added to the <code>settings.json</code> configuration</p> <pre><code>   \"workbench.colorTheme\": \"Solarized Light\",\n    \"editor.fontSize\": 14,\n    \"editor.fontFamily\": \"'Fira Code', 'Ubuntu Mono', 'Droid Sans Mono', 'monospace', monospace, 'Droid Sans Fallback'\",\n    \"window.zoomLevel\": 1,\n    \"calva.paredit.defaultKeyMap\": \"strict\"\n</code></pre>"},{"location":"guide/quick-start/#structural-editing-paredit","title":"Structural editing - Paredit","text":"<p>, k is the structural editing menu.</p> <p>Structural editing ensures code can be written and edited without breaking the structure of Clojure.  Structural editing ensures you dont have uneven parentheses, <code>()</code>, <code>[]</code>, <code>{}</code>, etc.</p> <p>The Calva visual Guide to Paredit includes lots of examples of using Structural editing.</p> Keybinding Description , k . Toggle paredit strict mode , k b Barf forwards , k c Convolute expression , k h Jump backwards , k j Jump forward down an expression , k k Jump backwards down an expression , k l Jump forward an expression , k r Raise an expression (over-write parent expression) , k s Slurp forward , k t Transpose expression , k w ( Wrap with () , k w [ Wrap with [] , k w { Wrap with {} , k w \" Wrap with \"\" , k w p rewrap with () , k w s rewWrap with [] , k w c rewWrap with {} , k w q rewWrap with \"\""},{"location":"guide/clojure/","title":"Clojure Workflow","text":"<p>The REPL workflow is an effective way to develop Clojure projects.</p>"},{"location":"guide/clojure/#create-project","title":"Create Project","text":"<p> Creating projects using a template is a quick way to get started.  A template will create the project structure, add libraries and even include example code.</p> Practicalli Project Templates <p> practicalli/project-templates provide production level templates that include Practicalli  REPL Reloaded Workflow tools, Docker &amp; Compose configurations, Makefile tasks for a consistent command line UI and GitHub workflows to manage quality of code and configuration.</p> <ul> <li><code>practicalli/minimal</code> - production level project with minimal code examples</li> <li><code>practicalli/application</code> - production level project template with Mulog, Docker, Make, MegaLinter, etc.</li> <li><code>practicalli/service</code> - production level web services template with Integrant, Http-kit, Reitit, Mulog, Docker, Make, MegaLinter, etc.</li> </ul> <p>Use deps-new to create a project, specifying a template and a name for the project.</p> <p>Open a terminal window and change to a suitable folder and create a project using <code>:project/create</code> alias from  Practicalli Clojure CLI Config</p> <pre><code>clojure -T:project/create\n</code></pre> <p>The <code>-T</code> execution option runs the tool with Clojure.exec which uses keywords to specify the options for creating the project.</p> <p><code>:project/create</code> alias uses <code>:template practicalli/minimal</code> <code>:name practicalli/playground</code> arguments by defauls, which can e overridden on the command line</p> <p>The name of the project is of the form <code>domain/app-lib-name</code>. Use a company name or Git Service account name as the <code>domain</code>.</p>"},{"location":"guide/clojure/#open-project","title":"Open Project","text":"<p>Run the command <code>code .</code> from the root of a Clojure project or run VSCode and use the VSpaceCode key bindings to open a project.</p> <p>Space f f and open the Folder that contains a Clojure project. Select the top level of the folder, e.g. <code>playground</code> and click OK</p> <p> </p>"},{"location":"guide/clojure/#start-a-repl","title":"Start a REPL","text":"<p>Either start a terminal UI repl and connect to it from Calva, or use Calva jack-in to start a repl and automatically connect.</p> Start REPL via VSCode terminal <p>Ctrl+` toggles open the VSCode Integrated terminal.  Or open your operating system terminal.</p> <p>In the terminal, change to the folder than contains your project, e.g. <code>cd projects/clojure/playground</code></p> <p>Configure the VS Code internal terminal to use the GitBash shell.</p> Terminal UICalva jack-in <p>Change into the directory and test the project runs by starting a REPL with  Terminal REPL</p> <p>Start rich terminal UI REPL</p> <pre><code>cd playground &amp;&amp; clojure -M:repl/rebel\n</code></pre> <p>A repl prompt should appear</p> <p> </p> <p>Type code expressions at the repl prompt and press RETURN to evaluate them.</p> <p>Evaluate code at REPL prompt</p> <pre><code>(+ 1 2 3 4 5)\n</code></pre> <p>Switch to VSpaceCode with the Clojure <code>playground</code> project open.</p> <p>, ' to connect to the REPL process started in the terminal UI</p> <p> </p> <p>Select the tool to use to start the repl</p> <p> </p> <p>Confirm the host and port of the REPL, this should be automatically detected. These details were shown when the REPL was run in the terminal.</p> <p> </p> <p>Wait a few moments for the REPL to start.</p> <p>Open the <code>playground</code> project in VS Code.</p> <p><code>, \"</code> to jack-in to a Clojure REPL for the project.  This starts an external REPL process and connects to it.</p> <p>Select <code>deps.edn</code> for Clojure CLI when prompted for the project type</p> <p> </p> <p>Select the tool to use to start the repl</p> <p> </p> <p>Wait a few moments for the REPL to start.</p> <p>Once the REPL is connected, the <code>REPL</code> name with a lightning bolt icon is displayed in the status bar.</p> <p> </p> Troubleshooting <p>If the REPL did not start, the nREPL link in the bottom blue bar will show the word \"Disconnected\".</p> <p></p> <p>Open the Output tab to see the progress of the REPL starting.</p> <p></p> <p>Try running a REPL in a terminal and connecting to it.</p>"},{"location":"guide/clojure/#evaluating-clojure-code","title":"Evaluating Clojure code","text":"<p><code>, e f</code> to evaluate a top-level expression and see the results inline.  Or <code>, e s</code> to select a specific expression and <code>, e e</code> to evaluate it.</p> <p><code>, e l</code> to clear all the evaluated results.</p> Keybinding Description <code>, e ;</code> Evaluate the current expression and paste as comment <code>, e :</code> Evaluate the current expression and paste as comment <code>, e e</code> Show the result of the current expression <code>, e f</code> Show the result of the top level expression <code>, e l</code> Clear all the evaluated results <code>, e n</code> Evaluate all code in the current file/namespace <code>, e w</code> Replace the expression with its result"},{"location":"guide/clojure/#running-tests","title":"Running tests","text":"<p><code>, e n</code> to evaluate all the unit test code in the current window</p> <p><code>, t a</code> to run all the unit tests in the project</p> <p><code>, t f</code> to run just the failing tests</p> Keybinding Description <code>, t a</code> Run all tests in the project <code>, t f</code> Run all tests for the current namespace <code>, t n</code> Run all tests for the current namespace <code>, t t</code> Run all tests for the current namespace <p>Test results shown in REPL</p> <p>The REPL window is used to display the results of running unit tests</p>"},{"location":"guide/clojure/#commenting-uncommenting-code","title":"Commenting / uncommenting code","text":"<p><code>SPC c l</code> toggles a comment on the current line.</p> <p>Use the Add Line Comment command to place <code>;;</code> at the start of a line, which comments it out.</p>"},{"location":"guide/clojure/#linting","title":"Linting","text":"<p><code>, c n</code> and <code>, c N</code> cycle through clj-kondo linting warnings</p>"},{"location":"guide/clojure/#increase-decrease-font-size","title":"Increase / decrease font size","text":"<p><code>Ctrl +</code> and <code>Ctrl -</code> will increase and decrease the size of the whole editor.</p> <p><code>SPC SPC</code> and type the command <code>Preference: Open Settings (JSON)</code> to open the <code>settings.json</code> configuration file.  Update the value for <code>editor.fontSize</code> and save the file.  The font should update immediately in the VS Code UI.</p> <p>Other useful options that can be added to the <code>settings.json</code> configuration</p> settings.json<pre><code>   \"workbench.colorTheme\": \"Solarized Light\",\n\"editor.fontSize\": 14,\n\"editor.fontFamily\": \"'Fira Code', 'Ubuntu Mono', 'Droid Sans Mono', 'monospace', monospace, 'Droid Sans Fallback'\",\n\"window.zoomLevel\": 1,\n\"calva.paredit.defaultKeyMap\": \"strict\"\n</code></pre>"},{"location":"guide/clojure/#structural-editing-paredit","title":"Structural editing - Paredit","text":"<p><code>, k</code> is the structural editing menu.</p> <p>Structural editing ensures code can be written and edited without breaking the structure of Clojure.  Structural editing ensures you dont have uneven parentheses, <code>()</code>, <code>[]</code>, <code>{}</code>, etc.</p> <p>The Calva visual Guide to Paredit includes lots of examples of using Structural editing.</p> Keybinding Description <code>, k .</code> Toggle paredit strict mode <code>, k b</code> Barf forwards <code>, k c</code> Convolute expression <code>, k h</code> Jump backwards <code>, k j</code> Jump forward down an expression <code>, k k</code> Jump backwards down an expression <code>, k l</code> Jump forward an expression <code>, k r</code> Raise an expression (over-write parent expression) <code>, k s</code> Slurp forward <code>, k t</code> Transpose expression <code>, k w (</code> Wrap with () <code>, k w [</code> Wrap with [] <code>, k w {</code> Wrap with {} <code>, k w \"</code> Wrap with \"\" <code>, k w p</code> rewrap with () <code>, k w s</code> rewWrap with [] <code>, k w c</code> rewWrap with {} <code>, k w q</code> rewWrap with \"\""},{"location":"install/","title":"VSCode","text":"<p>Install VS Code with the VSpaceCode and Calva Extensions</p> <p>VSCode version 1.79 used in this guide</p> <p></p>"},{"location":"install/#install-vscode","title":"Install VSCode","text":"Debian/UbuntuMacOSXWindows <p>Download the <code>.deb</code> file from VSCode website</p> Command LineSoftware Center <p>Change to the directory the <code>.deb</code> file was downloaded to</p> <p><pre><code>sudo apt install ./code_1.79.2-1686734195_amd64.deb\n</code></pre> Enter login account password when prompted</p> <p>Open (double click) the file.  The Ubuntu software studio will open.  Click the Install button.</p> <p></p> <p>Enter your password when prompted to install the software.</p> <p>Close the Ubuntu Software app once the install has finished.</p> <p>To run VSCode, press the <code>Super</code> key and type <code>code</code>, or open a terminal and type the command <code>code</code>.</p> <p>Reference: VSCode on Linux</p> <p>Download the <code>.zip</code> file</p> <p>Double-click on the downloaded archive to expand the contents.</p> <p>Drag <code>Visual Studio Code.app</code> to the <code>Applications</code> folder, making it available in the Launchpad.</p> <p>Add VS Code to your Dock by right-clicking on the icon and choosing <code>Options, Keep in Dock</code>.</p> <p>Reference: VSCode on MacOSX</p> <p>Launch VSCode from the Dock, or in a command line terminal, type <code>code</code>.</p> <p>Download the Windows Installer</p> <p>Run the installer which should have a name similar to <code>VSCodeUserSetup-{version}.exe</code>.</p> <p>VS Code is installed under <code>C:\\users\\{username}\\AppData\\Local\\Programs\\Microsoft VS Code</code>.</p>"},{"location":"install/#vscode-welcome-wizard","title":"VSCode Welcome wizard","text":"<p>When VSCode is first run the Welcome wizard will display.</p> <p> </p> <p>Use the wizard to set the default theme</p> <p> </p> <p>Select Mark Done link to close the wizard.</p> <p>Practicalli uses the Solarized Light and Dark themes</p> <p>Ctrl+k Ctrl+T toggles the theme used for VSCode</p>"},{"location":"install/#calva-extension","title":"Calva Extension","text":"<p>The Calva extension supports Clojure and ClojureScript development</p> Quick OpenExtensions tab <p>Ctrl+p to launch VS Code Quick Open, paste the extension install command and press enter. <pre><code>ext install betterthantomorrow.calva\n</code></pre></p> <p>Select the Extensions icon in the left hand navigation.</p> <p>Type <code>calva</code> into the search box to list the relevant extension</p> <p>Click the <code>Install</code> button next to the <code>VSpaceCode</code> extension.</p> <p> </p> <p>After a few moments the extension will be installed.</p> <p>Extension install does not require restarting VSCode</p>"},{"location":"install/#vspacecode-extension","title":"VSpaceCode extension","text":"Quick OpenExtensions tab <p>Launch VS Code Quick Open (Ctrl+P), paste the following command, and press enter.</p> <pre><code>ext install VSpaceCode.vspacecode\n</code></pre> <p>Select the Extensions icon in the left hand navigation.</p> <p>Type <code>vspacecode</code> into the search box to list the relevant extension</p> <p>Click the <code>Install</code> button next to the <code>VSpaceCode</code> extension.</p> <p> </p> <p>The VSpaceCode Expanded extension is not used in this guide</p> <p>After a few momments the extension will show as installed, along with several other extensions that VSpaceCode uses.</p> <p> </p>"},{"location":"install/#configuration-wizard","title":"Configuration Wizard","text":"<p>Once the VSpaceCode extension has finished installing, the Getting Started with VSpaceCode page is displayed with a configuration wizard that updates the User <code>settings.json</code> and <code>keybindings.json</code> files.</p> <p>Select Configure for you button in the Setting up section of the page.</p> <p> </p> <p>Select Mark Done to close the wizard</p> Troubleshoot Wizard <p>If the <code>.config/Code/User/settings.json</code> and <code>.config/Code/User/keybindings.json</code> files are empty then an older version of VSpaceCode may still be configured in the VSCode settings.</p> <p>Start the configuration wizard using Ctrl+p for the quick open prompt and enter <code>vspacecode</code></p> <p>Select Getting Started with VSpaceCode</p> <p></p> <p>If the wizard still does not run, quit VSCode and remove <code>$HOME/.vscode</code> and <code>$HOME/.config/Code</code> directories to ensure a clean starting point (backing up the User settings.json and keybindings.json if any useful configurations were added on top of the VSpaceCode configuration).</p> <p>All extensions must be installed again.</p> <p>If the wizard keeps failing, use the Manual configuration approach</p> Manual Configuration <p>Follow the manual configuration commands if the automatic setup failed or was not followed.</p> <p><code>Ctrl+Shift+p</code> to open the VS Code command menu, type <code>vspacecode</code> to narrow the command list and select <code>VSpaceCode: Configure Default Settings and Keybindings</code>.</p> <p> </p> <p>Save the changes by opening the <code>settings.json</code> and <code>keybindings.json</code>.</p> <p>Ctrl+Shift+p and searching <code>Preference: Open Settings (JSON)</code> and <code>Preference: Open Keyboard Shortcuts (JSON)</code> in turn. Ctrl+s to save the highlighted file.</p>"},{"location":"install/#calva-keybinding-remap","title":"Calva Keybinding remap","text":"<p>Calva extension adds <code>Esc</code> as a keyboard shortcut for clearing evaluation results.  This binding breaks vim-style editing in VSpaceCode, so the Calva keyboard shortcut should be remapped.</p> <p>Ctrl+Shift+p to open the VSCode command menu, type <code>keyboard</code> to narrow the command list and select <code>Preferences: Open keyboard shortcuts (JSON)</code>.</p> <p>Edit the <code>.config/Code/User/keybindings.json</code> file and add the following configuration to remove <code>Esc</code> from the <code>calva.clearInlineResults</code> command and create a new keyboard shortcut for that command using <code>Shift Esc</code></p> <p>Add this code before the final closing bracket, <code>}</code>, in the file.</p> .config/Code/User/keybindings.json<pre><code>  {\n\"key\": \"escape\",\n\"command\": \"-calva.clearInlineResults\"\n},\n{\n\"key\": \"shift+escape\",\n\"command\": \"calva.clearInlineResults\",\n\"when\": \"editorTextFocus &amp;&amp; !editorHasMultipleSelections &amp;&amp; !editorReadOnly &amp;&amp; !hasOtherSuggestions &amp;&amp; !suggestWidgetVisible &amp;&amp; editorLangId == 'clojure'\"\n}\n</code></pre> <p>Remap Vim insert mode keybinding to go into normal mode by adding the following to your user settings:</p> settings.json<pre><code>\"vim.insertModeKeyBindings\": [\n{\n\"before\": [\"f\", \"d\"],\n\"after\": [\"&lt;esc&gt;\"]\n}\n]\n</code></pre>"},{"location":"install/#confirm-installation","title":"Confirm installation","text":"<p>To confirm that VSpaceCode is working by opening an editor window.</p> <p>Select the Explorer Icon in the left hand menu, then select Open Folder...</p> <p> </p> <p>Open a Clojure project to confirm the Calva and VSpaceCode extension are working (or any text file to test VSpaceCode).</p> <p>Space should open the VSpaceCode menu in the top center of VSCode.</p> <p> </p> <p>Calva should show a welcome message</p> <p> </p>"},{"location":"introduction/contributing/","title":"Contributing to Practicalli","text":"<p>Practicalli books are written in markdown and use MkDocs to generate the published website via a GitHub workflow.  MkDocs can also run a local server using the <code>make docs</code> target from the <code>Makefile</code></p> <p>By submitting content ideas and corrections you are agreeing they can be used in this book under the Creative Commons Attribution ShareAlike 4.0 International license.  Attribution will be detailed via GitHub contributors.</p> <p>All content and interaction with any persons or systems must be done so with respect and within the Practicalli Code of Conduct.</p>"},{"location":"introduction/contributing/#book-status","title":"Book status","text":""},{"location":"introduction/contributing/#submit-and-issue-or-idea","title":"Submit and issue or idea","text":"<p>If something doesnt seem quite right or something is missing from the book, please raise an issue via the GitHub repository explaining in as much detail as you can.</p> <p>Raising an issue before creating a pull request will save you and the maintainer time.</p>"},{"location":"introduction/contributing/#considering-a-pull-request","title":"Considering a Pull request?","text":"<p>Before investing any time in a pull request, please raise an issue explaining the situation.  This can save you and the maintainer time and avoid rejected pull requests.</p> <p>Please keep pull requests small and focused, as they are much quicker to review and easier to accept.  Ideally PR's should be for a specific page or at most a section.</p> <p>A PR with a list of changes across different sections will not be merged, it will be reviewed eventually though.</p>"},{"location":"introduction/contributing/#thank-you-to-everyone-that-has-contributed","title":"Thank you to everyone that has contributed","text":"<p>A huge thank you to Rich Hickey and the team at Cognitect for creating and continually guiding the Clojure language.  Special thank you to Alex Miller who has provided excellent advice on working with Clojure and the CLI tooling.</p> <p>The Clojure community has been highly supportive of everyone using Clojure and I'd like to thank everyone for the feedback and contributions.  I would also like to thank everyone that has joined in with the London Clojurins community, ClojureBridgeLondon, Clojurians Slack community, Clojurians Zulip community and Clojureverse community.</p> <p>Thank you to everyone who sponsors the Practicalli websites and videos and for the Clojurists Together sponsorship, it helps me continue the work at a much faster pace.</p> <p>Special thanks to Bruce Durling for getting me into Cloure in the first place.</p> <p></p>"},{"location":"introduction/repl-workflow/","title":"REPL Driven Development","text":"<p>Always be REPL'ing</p> <p>Coding without a REPL feels limiting. The REPL provides fast feedback from code as its crafted, testing assumptions and design choices every step of the journey to a solution  - John Stevenson, Practical.li</p> <p>Clojure is a powerful, fun and highly productive language for developing applications and services.  The clear language design is supported by a powerful development environment known as the REPL (read, evaluate, print, loop).  The REPL gives you instant feedback on what your code does and enables you to test either a single expression or run the whole application (including tests).</p> <p>REPL driven development is the foundation of working with Clojure effectively</p> <p>An effective Clojure workflow begins by running a REPL process.  Clojure expressions are written and evaluated immediately to provide instant feedback. The REPL feedback helps test the assumptions that are driving the design choices.</p> <ul> <li>Read - code is read by the Clojure reader, passing any macros to the macro reader which converts those macros into Clojure code.</li> <li>Evaluate - code is compiled into the host language (e.g. Java bytecode) and executed</li> <li>Print - results of the code are displayed, either in the REPL or as part of the application.</li> <li>Loop - the REPL is a continuous process that evaluates code, either a single expression or the whole application.</li> </ul> <p>Design decisions and valuable data from REPL experiments can be codified as specifications and unit tests</p> <p>Practicalli REPL Reloaded Workflow</p> <p>The principles of REPL driven development are implemented in practice using the Practicalli REPL Reloaded Workflow and supporting tooling.  This workflow uses Portal to inspect all evaluation results and log events, hot-load libraries into the running REPL process and reloads namespaces to support major refactor changes.</p>"},{"location":"introduction/repl-workflow/#evaluating-source-code","title":"Evaluating source code","text":"<p>A REPL connected editor is the primary tool for evaluating Clojure code from source code files, displaying the results inline.</p> <p>Source code is automatically evaluated in its respective namespace, removing the need to change namespaces in the REPL with (<code>in-ns</code>) or use fully qualified names to call functions.</p> <p>Evaluate Clojure in VSpaceCode</p> <p><code>, e f</code> evaluates the top level form under the cursor, <code>, e e</code> evaluated the expression immediately before the cursor (useful for evaluating nested expressions)</p> <p> </p> Evaluate Clojure in a Terminal UI REPL <p>Entering expressions at the REPL prompt evaluates the expression immediately, returning the result directly underneath  </p>"},{"location":"introduction/repl-workflow/#rich-comment-blocks-living-documentation","title":"Rich Comment blocks - living documentation","text":"<p>The <code>(comment ,,,)</code> function wraps code that is only run directly by the developer using a Clojure aware editor.</p> <p>Expressions in rich comment blocks can represent how to use the functions that make up the namespace API.  For example, starting/restarting the system, updating the database, etc.  Expressions provide examples of calling functions with typical arguments and make a project more accessible and easier to work with.</p> <p>Clojure Rich Comment to manage a service</p> <pre><code>(ns practicalli.gameboard.service)\n(defn app-server-start [port] ,,,)\n(defn app-server-start [] ,,,)\n(defn app-server-restart [] ,,,)\n(defn -main\n\"Start the service using system components\"\n[&amp; options] ,,,)\n(comment\n(-main)\n(app-server-start 8888)\n(app-server-stop)\n(app-server-restart 8888)\n(System/getenv \"PORT\")\n(def environment (System/getenv))\n(def system-properties (System/getProperties))\n) ; End of rich comment block\n</code></pre> <p>Rich comment blocks are very useful for rapidly iterating over different design decisions by including the same function but with different implementations.  Hide clj-kondo linter warnings for redefined vars (<code>def</code>, <code>defn</code>) when using this approach.</p> <pre><code>;; Rich comment block with redefined vars ignored\n#_{:clj-kondo/ignore [:redefined-var]}\n(comment\n(defn value-added-tax []\n;; algorithm design - first idea)\n(defn value-added-tax []\n;; algorithm design - second idea)\n) ;; End of rich comment block\n</code></pre> <p>The \"Rich\" in the name is an honourary mention to Rich Hickey, the author and benevolent dictator of Clojure design.</p>"},{"location":"introduction/repl-workflow/#design-journal","title":"Design Journal","text":"<p>A journal of design decisions makes the code easier to understand and maintain.  Code examples of design decisions and alternative design discussions are captured, reducing the time spent revisiting those discussions.</p> <p>Journals simplify the developer on-boarding processes as the journey through design decisions are already documented.</p> <p>A Design Journal is usually created in a separate namespace, although it may start as a rich comment at the bottom of a namespace.</p> <p>A journal should cover the following aspects</p> <ul> <li>Relevant expressions use to test assumptions about design options.</li> <li>Examples of design choices not taken and discussions why (saves repeating the same design discussions)</li> <li>Expressions that can be evaluated to explain how a function or parts of a function work</li> </ul> <p>The design journal can be used to create meaningful documentation for the project very easily and should prevent time spent on repeating the same conversations.</p> <p>Example design journal</p> <p>Design journal for TicTacToe game using Reagent, ClojureScript and Scalable Vector Graphics</p>"},{"location":"introduction/repl-workflow/#viewing-data-structures","title":"Viewing data structures","text":"<p>Pretty print shows the structure of results from function calls in a human-friendly form, making it easier for a developer to parse and more likely to notice incorrect results.</p> <p>, e p on the Spacemacs Clojure menu has several commands to Pretty Print data structure results when evaluating code.</p> <p>, d v is the Cider Inspect menu for paging through very large data sets and navigate nested data structures in detail.</p> <p></p> <p>, d is the Cider debug menu which can inspect view intermediate values and data structures during the debugging of Clojure function calls.</p> <p>Cider inspector is an effective way to navigate nested data and page through large data sets.</p> <p>Tools to view and navigate code</p> <ul> <li> Cider inspector is an effective way to navigate nested data and page through large data sets.</li> <li> Portal Inspector to visualise many kinds of data in many different forms.</li> </ul> <p></p>"},{"location":"introduction/repl-workflow/#code-style-and-idiomatic-clojure","title":"Code Style and idiomatic Clojure","text":"<p>Clojure aware editors should automatically apply formatting that follows the  Clojure Style guide.</p> <p>Live linting with clj-kondo suggests common idioms and highlights a wide range of syntax errors as code is written, minimizing bugs and therefore speeding up the development process.</p> <p> </p> <p>Clojure LSP is build on top of clj-kondo</p> <p> Clojure LSP uses clj-kondo static analysis to provide a standard set of development tools (format, refactor, auto-complete, syntax highlighting, syntax &amp; idiom warnings, code navigation, etc).</p> <p>Clojure LSP can be used with any Clojure aware editor that provides an LSP client, e.g.  Spacemacs,  Doom Emacs,  Neovim, VSCode.</p> <p>Clojure Style Guide</p> <p>The  Clojure Style guide provides examples of common formatting approaches, although the development team should decide which of these to adopt.  Emacs <code>clojure-mode</code> will automatically format code and so will Clojure LSP (via cljfmt).  These tools are configurable and should be tailored to the teams standard.</p>"},{"location":"introduction/repl-workflow/#data-and-function-specifications","title":"Data and Function specifications","text":"<p> Clojure spec is used to define a contract on incoming and outgoing data, to ensure it is of the correct form.</p> <p>As data structures are identified in REPL experiments, create data specification to validate the keys and value types of that data.</p> <pre><code>;; ---------------------------------------------------\n;; Address specifications\n(spec/def ::house-number string?)\n(spec/def ::street string?)\n(spec/def ::postal-code string?)\n(spec/def ::city string?)\n(spec/def ::country string?)\n(spec/def ::additional string?)\n(spec/def ::address   ; Composite data specification\n(spec/keys\n:req-un [::street ::postal-code ::city ::country]\n:opt-un [::house-number ::additional]))\n;; ---------------------------------------------------\n</code></pre> <p>As the public API is designed, specifications for each functions arguments are added to validate the correct data is used when calling those functions.</p> <p> Generative testing provides a far greater scope of test values used incorporated into unit tests. Data uses clojure.spec to randomly generate data for testing on each test run.</p>"},{"location":"introduction/repl-workflow/#test-driven-development-and-repl-driven-development","title":"Test Driven Development and REPL Driven Development","text":"<p>Test Driven Development (TDD) and REPL Driven Development (RDD) complement each other as they both encourage incremental changes and continuous feedback.</p> <p>Test Driven Development fits well with Hammock Time, as good design comes from deep thought</p> <ul> <li>RDD enables rapid design experiments so different approaches can easily and quickly be evaluated .</li> <li>TDD focuses the results of the REPL experiments into design decisions, codified as unit tests.  These tests guide the correctness of specific implementations and provide critical feedback when changes break that design.</li> </ul> <p> Unit tests should support the public API of each namespace in a project to help prevent regressions in the code.  Its far more efficient in terms of thinking time to define unit tests as the design starts to stabilize than as an after thought.</p> <p><code>clojure.test</code> library is part of the Clojure standard library that provides a simple way to start writing unit tests.</p> <p> Clojure spec can also be used for generative testing, providing far greater scope in values used when running unit tests.  Specifications can be defined for values and functions.</p> <p>Clojure has a number of  test runners available.  Kaocha is a test runner that will run unit tests and function specification checks.</p> <p>Automate local test runner</p> <p>Use  kaocha test runner in watch mode to run tests and specification check automatically (when changes are saved) <pre><code>clojure -X:test/watch\n</code></pre></p>"},{"location":"introduction/repl-workflow/#continuous-integration-and-deployment","title":"Continuous Integration and Deployment","text":"<p>Add a  continuous integration service to run tests and builds code on every shared commit.  Spin up testable review deployments when commits pushed to a pull request branch, before pushing commits to the main deployment branch, creating an effective pipeline to gain further feedback.</p> <ul> <li> CircleCI provides a simple to use service that supports Clojure projects.</li> <li> GitHub Workflows and GitHub actions marketplace to quickly build a tailored continuous integration service, e.g. Setup Clojure GitHub Action.</li> <li> GitLab CI</li> </ul> <p></p>"},{"location":"introduction/repl-workflow/#live-coding-with-data-stuart-halloway","title":"Live Coding with Data - Stuart Halloway","text":"<p>There are few novel features of programming languages, but each combination has different properties. The combination of dynamic, hosted, functional and extended Lisp in Clojure gives developers the tools for making effective programs. The ways in which Clojure's unique combination of features can yield a highly effective development process.</p> <p>Over more than a decade we have developed an effective approach to writing code in Clojure whose power comes from composing many of its key features. As different as Clojure programs are from e.g. Java programs, so to can and should be the development experience. You are not in Kansas anymore!</p> <p>This talk presents a demonstration of the leverage you can get when writing programs in Clojure, with examples, based on my experiences as a core developer of Clojure and Datomic.</p> <p> </p>"},{"location":"introduction/writing-tips/","title":"Writing tips for MkDocs","text":"<p>Making the docs more engaging using the mkdocs-material theme reference guide</p> Configuring Colors <p>Material for MkDocs - Changing the colors lists the primary and accent colors available.</p> <p>HSL Color Picker for codes to modify the theme style, overriding colors in <code>docs/assets/stylesheets/extra.css</code></p>"},{"location":"introduction/writing-tips/#hypertext-links","title":"Hypertext links","text":"<p>Links open in the same browser window/tab by default.</p> <p>Add <code>{target=_blank}</code> to the end of a link to configure opening in a new tab</p> <pre><code>[link text](url){target=_blank}\n</code></pre>"},{"location":"introduction/writing-tips/#buttons","title":"Buttons","text":"<p>Convert any link into a button by adding <code>{.md-button}</code> class names to end of the markdown for a link, which uses <code>.md-button-primary</code> by default.  Include <code>target=_blank</code> for buttons with links to external sites.</p> <pre><code>[link text](http://practical.li/blog){.md-button target=_blank}\n</code></pre> <p>Or specify a different class</p> <pre><code>[link text](http://practical.li/blog){.md-button .md-button-primary}\n</code></pre> <p>Add an icon to the button</p> <p> Practicalli Issues  Practicalli Blog</p> <pre><code>[:fontawesome-brands-github: Practicalli Issues](http://practical.li/blog){ .md-button .md-button-primary }\n[:octicons-heart-fill-24: Practicalli Blog](http://practical.li/blog){ .md-button .md-button-primary }\n</code></pre> <p>Search all supported icons</p>"},{"location":"introduction/writing-tips/#youtube-video","title":"YouTube video","text":"<p>Use an iframe element to include a YouTube video, wrapping in a paragraph tag with center alignment to place the video in a centered horizontal position</p> <pre><code>&lt;p style=\"text-align:center\"&gt;\n&lt;iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/rQ802kSaip4\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;\n&lt;/p&gt;\n</code></pre> <p>mkdocs material does not have direct support for adding a YouTube video via markdown.</p>"},{"location":"introduction/writing-tips/#admonitions","title":"Admonitions","text":"<p>Supported admonition types</p> <p>Note</p> <p>Use <code>!!!</code> followed by <code>NOTE</code></p> <p>Adding a title</p> <p>Use <code>!!!</code> followed by <code>NOTE</code> and a <code>\"title in double quotes\"</code></p> <p>Shh, no title bar just the text... Use <code>!!!</code> followed by <code>NOTE</code> and a <code>\"\"</code> empty double quotes</p> <p>Abstract</p> <p>Use <code>!!!</code> followed by <code>ABSTRACT</code></p> <p>Info</p> <p>Use <code>!!!</code> followed by <code>INFO</code></p> <p>Tip</p> <p>Use <code>!!!</code> followed by <code>TIP</code></p> <p>Success</p> <p>Use <code>!!!</code> followed by <code>SUCCESS</code></p> <p>Question</p> <p>Use <code>!!!</code> followed by <code>QUESTION</code></p> <p>Warning</p> <p>Use <code>!!!</code> followed by <code>WARNING</code></p> <p>Failure</p> <p>Use <code>!!!</code> followed by <code>FAILURE</code></p> <p>Danger</p> <p>Use <code>!!!</code> followed by <code>DANGER</code></p> <p>Bug</p> <p>Use <code>!!!</code> followed by <code>BUG</code></p> <p>Example</p> <p>Use <code>!!!</code> followed by <code>EXAMPLE</code></p> <p>Quote</p> <p>Use <code>!!!</code> followed by <code>QUOTE</code></p>"},{"location":"introduction/writing-tips/#collapsing-admonitions","title":"Collapsing admonitions","text":"Note <p>Collapse those admonitions using <code>???</code> instead of <code>!!!</code></p> Replace with a title <p>Use <code>???</code> followed by <code>NOTE</code> and a <code>\"title in double quotes\"</code></p> Expanded by default <p>Use <code>???+</code>, note the <code>+</code> character,  followed by <code>NOTE</code> and a <code>\"title in double quotes\"</code></p>"},{"location":"introduction/writing-tips/#inline-blocks","title":"Inline blocks","text":"<p>Inline blocks of text to make a very specific callout within text</p> <p>Info</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Adding something to then end of text is probably my favourite</p> <p>Info</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"introduction/writing-tips/#code-blocks","title":"Code blocks","text":"<p>Code blocks include a copy icon automatically</p> <p>Syntax highlighting in code blocks</p> <pre><code>(defn my-function  ; Write a simple function\n\"With a lovely doc-string\"\n[arguments]\n(map inc [1 2 3]))\n</code></pre> <p>Give the code block a title using <code>title=\"\"</code> after the backtics and language name</p> src/practicalli/gameboard.clj<pre><code>(defn my-function\n\"With a lovely doc-string\"\n[arguments]\n(map inc [1 2 3]))\n</code></pre> <p>We all like line numbers, especially when you can set the starting line</p> src/practicalli/gameboard.clj<pre><code>(defn my-function\n\"With a lovely doc-string\"\n[arguments]\n(map inc [1 2 3]))\n</code></pre> <p>Add <code>linenums=42</code> to start line numbers from 42 onward</p> <pre><code>clojure linenums=\"42\" title=\"src/practicalli/gameboard.clj\"\n</code></pre>"},{"location":"introduction/writing-tips/#annotations","title":"Annotations","text":"<p>Annotations in a code block help to highlight important aspects.  Use the comment character for the language followed by a space and a number in brackets</p> <p>For example, in a shell code block, use <code># (1)</code> where 1 is the number of the annotation</p> <p>Use a number after the code block to add the text for the annotation, e.g. <code>1.</code>. Ensure there is a space between the code block and the annotation text.</p> <pre><code>ls -la $HOME/Downloads  # (1)\n</code></pre> <ol> <li> I'm a code annotation! I can contain <code>code</code>, formatted text, images, ... basically anything that can be written in Markdown.</li> </ol> <p>Code blocks with annotation, add <code>!</code> after the annotation number to suppress the <code>#</code> character</p> <pre><code>(defn helper-function\n\"Doc-string with description of function purpose\" ; (1)!\n[data]\n(merge {:fish 1} data)\n)\n</code></pre> <ol> <li>Always include a doc-string in every function to describe the purpose of that function, identifying why it was added and what its value is.</li> </ol> <p>GitHub action example with multiple annotations</p> <pre><code>name: ci # (1)!\non:\npush:\nbranches:\n- master # (2)!\n- main\npermissions:\ncontents: write\njobs:\ndeploy:\nruns-on: ubuntu-latest\nsteps:\n- uses: actions/checkout@v3\n- uses: actions/setup-python@v4\nwith:\npython-version: 3.x\n- run: pip install mkdocs-material # (3)!\n- run: mkdocs gh-deploy --force\n</code></pre> <ol> <li> <p>You can change the name to your liking.</p> </li> <li> <p>At some point, GitHub renamed <code>master</code> to <code>main</code>. If your default branch     is named <code>master</code>, you can safely remove <code>main</code>, vice versa.</p> </li> <li> <p>This is the place to install further [MkDocs plugins] or Markdown     extensions with <code>pip</code> to be used during the build:</p> <pre><code>pip install \\\nmkdocs-material \\\nmkdocs-awesome-pages-plugin \\\n...\n</code></pre> </li> </ol>"},{"location":"introduction/writing-tips/#highlight-lines-in-code-blocks","title":"Highlight lines in code blocks","text":"<p>Add highlight line meta data to a code block after the opening backticks and code block language.</p> <p><code>hl_lines=\"2\"</code> highlights line 2 in the codeblock</p> <pre><code>(defn my-function\n\"With a lovely doc-string\"\n[arguments]\n(map\ninc\n[1 2 3]))\n</code></pre>"},{"location":"introduction/writing-tips/#embed-external-files","title":"Embed external files","text":"<p><code>--8&lt;--</code> in a code block inserts code from a source code file or other text file</p> <p>Specify a local file from the root of the book project (the directory containing mkdocs.yml)</p> Scheduled Version Check GitHub Workflow from source code file scheduled version check<pre><code>---\n# ------------------------------------------\n# Scheduled check of versions\n# - use as non-urgent report on versions\n# - Uses POSIX Cron syntax\n#   - Minute [0,59]\n#   - Hour [0,23]\n#   - Day of the month [1,31]\n#   - Month of the year [1,12]\n#   - Day of the week ([0,6] with 0=Sunday)\n#\n# Using liquidz/anta to check:\n# - GitHub workflows\n# - deps.edn\n# ------------------------------------------\nname: \"Scheduled Version Check\"\non:\nschedule:\n# - cron: \"0 4 * * *\" # at 04:04:04 ever day\n# - cron: \"0 4 * * 5\" # at 04:04:04 ever Friday\n- cron: \"0 4 1 * *\" # at 04:04:04 on first day of month\nworkflow_dispatch: # Run manually via GitHub Actions Workflow page\njobs:\nscheduled-version-check:\nname: \"Scheduled Version Check\"\nruns-on: ubuntu-latest\nsteps:\n- run: echo \"\ud83d\ude80 Job automatically triggered by ${{ github.event_name }}\"\n- run: echo \"\ud83d\udc27 Job running on ${{ runner.os }} server\"\n- run: echo \"\ud83d\udc19 Using ${{ github.ref }} branch from ${{ github.repository }} repository\"\n- name: \"Checkout code\"\nuses: actions/checkout@v3\n- run: echo \"\ud83d\udc19 ${{ github.repository }} repository was cloned to the runner.\"\n- name: \"Antq Check versions\"\nuses: liquidz/antq-action@main\nwith:\nexcludes: \"\"\nskips: \"boot clojure-cli pom shadow-cljs leiningen\"\n# Summary\n- run: echo \"\ud83c\udfa8 library versions checked with liquidz/antq\"\n- run: echo \"\ud83c\udf4f Job status is ${{ job.status }}.\"\n</code></pre> Practicalli Project Templates Emacs project configuration - .dir-locals.el<pre><code>\n</code></pre> <p>Code example reuse</p> <p>Use an embedded local or external file (URL) when the same content is required in more than one place in the book.</p> <p>An effective way of sharing code and configuration mutliple times in a book or across multiple books.</p>"},{"location":"introduction/writing-tips/#content-tabs","title":"Content tabs","text":"<p>Create in page tabs that can also be</p> <p>Setting up a project</p> Clojure CLILeiningen <pre><code>clojure -T:project/new :template app :name practicalli/gameboard\n</code></pre> <pre><code>lein new app practicalli/gameboard\n</code></pre> <p>Or nest the content tabs in an admonition</p> <p>Run a terminal REPL</p> Clojure CLILeiningen <pre><code>clojure -T:repl/rebel\n</code></pre> <pre><code>lein repl\n</code></pre>"},{"location":"introduction/writing-tips/#diagrams","title":"Diagrams","text":"<p>Neat flow diagrams</p> <p>Diagrams - Material for MkDocs</p> <pre><code>graph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];</code></pre> <p>UML Sequence Diagrams</p> <pre><code>sequenceDiagram\n  Alice-&gt;&gt;John: Hello John, how are you?\n  loop Healthcheck\n      John-&gt;&gt;John: Fight against hypochondria\n  end\n  Note right of John: Rational thoughts!\n  John--&gt;&gt;Alice: Great!\n  John-&gt;&gt;Bob: How about you?\n  Bob--&gt;&gt;John: Jolly good!</code></pre> <p>state transition diagrams</p> <pre><code>stateDiagram-v2\n  state fork_state &lt;&lt;fork&gt;&gt;\n    [*] --&gt; fork_state\n    fork_state --&gt; State2\n    fork_state --&gt; State3\n\n    state join_state &lt;&lt;join&gt;&gt;\n    State2 --&gt; join_state\n    State3 --&gt; join_state\n    join_state --&gt; State4\n    State4 --&gt; [*]</code></pre> <p>Class diagrams - not needed for Clojure</p> <p>Entity relationship diagrams are handy though</p> <pre><code>erDiagram\n  CUSTOMER ||--o{ ORDER : places\n  ORDER ||--|{ LINE-ITEM : contains\n  LINE-ITEM {\n    customer-name string\n    unit-price int\n  }\n  CUSTOMER }|..|{ DELIVERY-ADDRESS : uses</code></pre>"},{"location":"introduction/writing-tips/#keyboard-keys","title":"Keyboard keys","text":"<p>Represent key bindings with Keyboard keys. Each number and alphabet character has their own key.</p> <ul> <li>1 <code>++1++</code> for numbers</li> <li>l <code>++\"l\"++</code> for lowercase character</li> <li>U <code>++u++</code> for uppercase character or <code>++\"U\"++</code> for consistency</li> </ul> <p>Punctionation keys use their name</p> <ul> <li>Space <code>++spc++</code></li> <li>, <code>++comma++</code></li> <li>Left <code>++arrow-left++</code></li> </ul> <p>For key sequences, place a space between each keyboard character</p> <ul> <li>Space g s <code>++spc++ ++\"g\"++ ++\"s\"++</code></li> </ul> <p>For key combinations, use join they key identifies with a <code>+</code></p> <ul> <li>Meta+X <code>++meta+x++</code></li> <li>Ctrl+Alt+Del <code>++ctrl+alt+del++</code></li> </ul> <p>MkDocs keyboard keys reference</p>"},{"location":"introduction/writing-tips/#images","title":"Images","text":"<p>Markdown images can be appended with material tags to set the size of the image, whether to appear on light or dark theme and support lazy image loading in browsers</p> SizeLazy LoadingAlignTheme SpecificAll Image Attributes <p><code>{style=\"height:150px;width:150px\"}</code> specifies the image size <pre><code>![Kitty Logo](https://raw.githubusercontent.com/practicalli/graphic-design/live/icons/kitty-light.png#only-dark){style=\"height:150px;width:150px\"}\n</code></pre></p> <p></p> <p><code>{loading=lazy}</code> specifies an image should lazily load in the browser <pre><code>![Kitty Logo](https://raw.githubusercontent.com/practicalli/graphic-design/live/icons/kitty-light.png){loading=lazy}\n</code></pre></p> <p><code>{aligh=left}</code> or <code>{aligh=right}</code> specifies the page alignment of an image. <pre><code>![Kitty Logo](https://raw.githubusercontent.com/practicalli/graphic-design/live/icons/kitty-light.png#only-dark){align=right}\n![Kitty Logo](https://raw.githubusercontent.com/practicalli/graphic-design/live/icons/kitty-dark.png#only-light){align=right}\n</code></pre></p> <p>  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p><code>![Kitty Logo](image/kitty-light.png#only-dark)</code> or <code>![Kitty Logo](image/kitty-light.png#only-light)</code>  specifies the theme the image should be shown, allowing different versions of images to be shown based on the theme. <pre><code>![Kitty Logo](https://raw.githubusercontent.com/practicalli/graphic-design/live/icons/kitty-light.png#only-dark){style=\"height:150px;width:150px\"}\n![Kitty Logo](https://raw.githubusercontent.com/practicalli/graphic-design/live/icons/kitty-dark.png#only-light){style=\"height:150px;width:150px\"}\n</code></pre> Use the theme toggle in the top nav bar to see the icon change between light and dark.  </p> <p>Requires the color pallet toggle</p> <p>Alight right, lazy load and set image to 150x150</p> <pre><code>![Kitty Logo](https://raw.githubusercontent.com/practicalli/graphic-design/live/icons/kitty-light.png#only-dark){align=right loading=lazy style=\"height:64px;width:64px\"}\n![Kitty Logo](https://raw.githubusercontent.com/practicalli/graphic-design/live/icons/kitty-dark.png#only-light){align=right loading=lazy style=\"height:64px;width:64px\"}\n</code></pre> <p>  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"introduction/writing-tips/#lists","title":"Lists","text":"<p>Task lists</p> <ul> <li> Lorem ipsum dolor sit amet, consectetur adipiscing elit</li> <li> Vestibulum convallis sit amet nisi a tincidunt<ul> <li> In hac habitasse platea dictumst</li> <li> In scelerisque nibh non dolor mollis congue sed et metus</li> <li> Praesent sed risus massa</li> </ul> </li> <li> Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque</li> </ul> <p>Task List example</p> <pre><code>- [x] Lorem ipsum dolor sit amet, consectetur adipiscing elit\n- [ ] Vestibulum convallis sit amet nisi a tincidunt\n    * [x] In hac habitasse platea dictumst\n    * [x] In scelerisque nibh non dolor mollis congue sed et metus\n    * [ ] Praesent sed risus massa\n- [ ] Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque\n</code></pre>"},{"location":"introduction/writing-tips/#tooltips","title":"Tooltips","text":"<p>The humble tool tip</p> <p>Hover me</p> <p>with references</p> <p>Hover me</p> <p>Icon tool tip with a title</p> <p></p>"},{"location":"introduction/writing-tips/#abreviations","title":"Abreviations","text":"<p>The HTML specification is maintained by the W3C.</p> <p>[HTML]: Hyper Text Markup Language [W3C]: World Wide Web Consortium</p>"},{"location":"introduction/writing-tips/#magic-links","title":"Magic links","text":"<p>MagicLink can auto-link HTML, FTP, and email links. It can auto-convert repository links (GitHub, GitLab, and Bitbucket) and display them in a more concise, shorthand format.</p> <p>Email Practicalli</p> <p>Practicalli Neovim</p>"}]}